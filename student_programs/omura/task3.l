(load "package://aizuspider_description/aizuspider-interface.l")
(ros::roseus "AizuSpider_interface")
(ros::load-ros-manifest "jsk_recognition_msgs")
(setq *obj-topic* "HSI_color_filter/boxes")
(setq *obj-list* nil)

(defun as-init (sim)
  (if sim
      (aizuspider-init :namespace "AizuSpiderAA")
    (setq *robot* (AizuSpiderSS)))
  (objects (list *robot*))
  )
(warn "as-init")

(defun obj-array-cb (msg)
  (setq *obj-list* (send msg :boxes))
  (when (and *obj-list* (null (cdr *obj-list*)))
    (send *irtviewer* :draw-objects :flush nil)
    (let* ((b (car *obj-list*))
           (dims (ros::tf-point->pos (send b :dimensions)))
           (bx (make-cube (elt dims 0) (elt dims 1) (elt dims 2)))
           (cam->obj-coords (ros::tf-pose->coords (send b :pose)))
           (cam-coords (send (send *robot* :rarm :end-coords) :copy-worldcoords))
           (object-coords)
           )
      (send cam-coords :rotate pi/2 :y)
      (send cam-coords :rotate -pi/2 :z)
      (send cam-coords :locate #f(0 0 -20))
      (send bx :newcoords (send cam-coords :transform cam->obj-coords))
      (send bx :worldcoords)
      (send bx :draw-on :flush nil :color #f(1 0 0))
      (send *irtviewer* :viewer :viewsurface :flush)
      (setq *box* bx)
      (objects (list *robot* *box*)))
    ))
(ros::subscribe *obj-topic* jsk_recognition_msgs::BoundingBoxArray #'obj-array-cb 1)

(defun reach-to-obj ()
  (ros::spin-once)
  (let* ((target-coords (send *box* :worldcoords))
         )
    (when (< (norm (v- (send (send *box* :worldcoords) :pos) (send (send *robot* :rarm :end-coords :worldcoords) :pos))) 1000)
      (send *robot* :rarm :inverse-kinematics target-coords
            :link-list (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
            :move-target (send *robot* :rarm :end-coords)
            :rotation-axis nil)
      (if (boundp '*ri*)
          (send *ri* :angle-vector (send *robot* :angle-vector) 5000))
      )
    )
  )

(defun grasp-and-reset-pose (&key (time 5000))
  (when (boundp '*ri*)
    (send *ri* :start-grasp)
    (send *ri* :wait-interpolation)
    (let* ((av (send *ri* :state :reference-vector))
           (reset-pose (copy-object (send *robot* :reset-pose)))
           )
      (setf (elt reset-pose 6) (elt av 6))
      (setf (elt reset-pose 7) (elt av 7))
      (setf (elt reset-pose 8) (elt av 8))
      (send *robot* :angle-vector reset-pose)
      )
    (send *ri* :angle-vector (send *robot* :angle-vector) 5000)
    (send *ri* :wait-interpolation)
    (ros::spin-once)
    )
  )

(defun throw-to-box ()
  (let* ((hand-coords (make-cascoords :pos #f(700 0 900)))
         )
    (send *robot* :rarm :inverse-kinematics hand-coords
          :link-list (send *robot* :link-list (send *robot* :rarm :end-coords :parent))
          :move-target (send *robot* :rarm :end-coords)
          :rotation-axis :x)
    (when (boundp '*ri*)
      (send *ri* :angle-vector (send *robot* :angle-vector) 5000)
      (send *ri* :wait-interpolation)
      (send *ri* :stop-grasp)
      (send *ri* :wait-interpolation)
      )
    )
  )

